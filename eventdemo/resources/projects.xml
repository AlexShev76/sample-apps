<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--

     Copyright 2014-2016 CyberVision, Inc.

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.

-->

<projectsConfig 
    xmlns="http://www.kaaproject.org"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.kaaproject.org ../../common/src/main/resources/demo/projects/demo_projects_schema.xsd">
    <project id="event_demo_java">
        <name>Event Java demo</name>
        <description>Kaa Event subsystem demo app based on Java SDK</description>
        <details>
            <![CDATA[
This simple app demonstrates capabilities of the Kaa Event subsystem on the Java SDK.

<h2>Installation</h2>
Download the jar file to your device by clicking the "Binary" button on the left. Make sure that you have Java installed on your device. Run the application using the following command in the console:
<pre>
$ java -jar EventDemo.jar
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. After starting the "Event Java demo" app on one endpoint, it will send an event to another endpoint, thus demonstrating how devices can interoperate with each other.<br/><br/>

Now it's time to test things out: start two application instances. By default, the application stores the state information in the same folder where the application was started. Therefore, you should start a new application instance from a different folder in order to avoid conflicts between the instances. Once the application instances are started, you will see them exchanging events. You can also start the "Event Java demo" application on different platforms to verify that events are delivered across the platforms.<br/><br/>

Please note that all the features of Administration UI are also supported by REST API.

<h2>What's next?</h2>
For more background on the Kaa Event subsystem please refer to the corresponding programming guide and design reference sections.
            ]]>
        </details>
        
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>JAVA</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
             
        <platforms>LINUX_X86 WINDOWS_X86</platforms>
        <features>EVENT</features>
        <complexity>BASIC</complexity>
        <bundleId>event_demos</bundleId>
        <sourceArchive>java/event_demo.tar.gz</sourceArchive>
        <projectFolder>JEventDemo</projectFolder>
        <sdkLibDir>JEventDemo/lib</sdkLibDir>
        <destBinaryFile>JEventDemo/build/jar/EventDemo.jar</destBinaryFile>
    </project>
    <project id="event_demo_c">
        <name>Event C demo</name>
        <description>Kaa Event subsystem demo app based on C SDK</description>
        <details>
            <![CDATA[
This simple app demonstrates capabilities of the Kaa Event subsystem on the C SDK.

<h2>Installation</h2>
Download the source code by clicking the "Source" button on the left. Unpack the downloaded archive and run the application using the following command in the console:
<pre>
$ ./build.sh deploy
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. After starting the "Event C demo" app on one endpoint, it will send an event to another endpoint, thus demonstrating how devices can interoperate with each other.<br/><br/>

Now it's time to test things out: start two application instances. By default, the application stores the state information in the same folder where the application was started. Therefore, you should start a new application instance from a different folder in order to avoid conflicts between the instances. Once the application instances are started, you will see them exchanging events. You can also start the "Event C demo" application on different platforms to verify that events are delivered across the platforms.<br/><br/>

Please note that all the features of Administration UI are also supported by REST API.

<h2>What's next?</h2>

For more background on the Kaa Event subsystem please refer to the corresponding programming guide and design reference sections.
            ]]>
        </details>
        
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>C</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
             
        <platforms>LINUX_X86</platforms>
        <features>EVENT</features>
        <complexity>BASIC</complexity>
        <bundleId>event_demos</bundleId>
        <sourceArchive>c/event_demo.tar.gz</sourceArchive>
        <projectFolder>CEventDemo</projectFolder>
        <sdkLibDir>CEventDemo/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="event_demo_cpp">
        <name>Event C++ demo</name>
        <description>Kaa Event subsystem demo app based on C++ SDK</description>
        <details>
            <![CDATA[
<p>
	This sample application uses the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Events/" target="_blank">events</a> feature based on the <a href="http://kaaproject.github.io/kaa/docs/Glossary/#sdk-type" target="_blank">Kaa C++ SDK</a>.
	You can use this application to define your own events and have your <a href="http://kaaproject.github.io/kaa/docs/Glossary/#endpoint-ep" target="_blank">endpoints</a> exchange them with one another.
</p>

<h1>Launching</h1>

To launch this sample application on the Kaa C++ SDK:

<ol>
	<li>
		Prepare your C++ SDK environment.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Using-Kaa-endpoint-SDKs/C++/" target="_blank">Using Kaa endpoint SDKs</a>.
	</li>
	<li>
		Click the <b>Source</b> button.
		A project source download window will open.
		Click <b>Ok</b> and download the .tar.gz file.
	</li>
	<li>
		Unpack the downloaded archive and run the following command from the directory containing the unpacked source files.
		
		<p>
			<b>Windows</b>
			<pre>
				mkdir build
				cd build
				cmake -G "Nmake Makefiles" ..
				nmake
			</pre>
		</p>
		<p>
			<b>Linux, OS X (macOS)</b>
			<pre>
				mkdir build
				cd build
				cmake ..
				make
			</pre>
		</p>
	</li>
	<li>
		The program will ask you to enter the target platform for your build.
		Press Enter to specify POSIX (default) or enter the name of one of the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Using-Kaa-endpoint-SDKs/Supported-platforms/" target="_blank">supported platforms</a> and press Enter.
		The C++ SDK and the demo application are now built and the demo application is launched.
	</li>
</ol>

Once you built the application, you can start it at any time using the following command.

<p>
	<b>Windows</b>
	<pre>
		demo_client
	</pre>
</p>
<p>
	<b>Linux, OS X (macOS)</b>
	<pre>
		./demo_client
	</pre>
</p>
<p>
	To launch a separate instance of the application, run it from another working directory.
	
	<pre>
		cd ..
		./build/demo_client
	</pre>
</p>

<h1>Troubleshooting</h1>

<h2>CMake returns an error message</h2>

<pre>
	CMake error: The source directory /.../CppEventDemo/libs/kaa does not contain a CMakeLists.txt file.
</pre>

<p>
	This means that no SDK tarball was found in the libs/kaa directory.
</p>

Try the following:

<ul>
	<li>
		Download and install the <a href="http://kaaproject.github.io/kaa/docs/Glossary/#kaa-sandbox" target="_blank">Kaa Sandbox</a>.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/Getting-started/" target="_blank">Getting started</a>.
	</li>
	<li>
		Download the SDK tarball for this sample application and put it in the libs/kaa folder.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Your-first-Kaa-application/#generating-sdk" target="_blank">Generating SDK</a>.
	</li>
</ul>

<h2>CMake returns an error message</h2>

<pre>
	CMake error: The following variables are used in this project, but they are set to NOTFOUND: (...)
</pre>

<p>
	This means that CMake could not find the required libraries because they were not installed correctly.
	To address this issue, check if you completed all the required steps of the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Using-Kaa-endpoint-SDKs/C++/" target="_blank">C++ SDK installation instructions</a>.
</p>
            ]]>
        </details>
        
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>CPP</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
             
        <platforms>LINUX_X86</platforms>
        <features>EVENT</features>
        <complexity>BASIC</complexity>
        <bundleId>event_demos</bundleId>
        <sourceArchive>cpp/event_demo.tar.gz</sourceArchive>
        <projectFolder>CppEventDemo</projectFolder>
        <sdkLibDir>CppEventDemo/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="event_demo_objc">
        <name>Event Objective-C demo</name>
        <description>Kaa Event subsystem demo app based on Objective-C SDK</description>
        <details>
            <![CDATA[
This simple app demonstrates capabilities of the Kaa Event subsystem on the Objective-C SDK.

<h2>Installation</h2>
Download the source code by clicking the "Source" button on the left. Unpack the downloaded archive and run the application using the following command in the console:
<pre>
$ ./build.sh
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. After starting the "Event Objective-C demo" app on one endpoint, it will send an event to another endpoint, thus demonstrating how devices can interoperate with each other.

Now it's time to test things out: start two application instances. By default, the application stores the state information in the same folder where the application was started. Therefore, you should start a new application instance from a different folder in order to avoid conflicts between the instances. Once the application instances are started, you will see them exchanging events. You can also start the "Event Objective-C demo" application on different platforms to verify that events are delivered across the platforms.<br/><br/>

Please note that all the features of Administration UI are also supported by REST API.

<h2>What's next?</h2>

For more background on the Kaa Event subsystem please refer to the corresponding programming guide and design reference sections.
            ]]>
        </details>
        <sdkLanguage>OBJC</sdkLanguage>
        <platforms>IOS</platforms>
        <features>EVENT</features>
        <complexity>BASIC</complexity>
        <bundleId>event_demos</bundleId>
        <sourceArchive>objc/event_demo.tar.gz</sourceArchive>
        <projectFolder>ObjCEventDemo</projectFolder>
        <sdkLibDir>ObjCEventDemo/libs</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <bundle id="event_demos">
        <name>Event demos</name>
        <description>Kaa Event subsystem demo applications bundle</description>
        <details>
            <![CDATA[
<p>
    This application bundle demonstrates the ability to exchange messages
    between endpoints through Kaa server, using Kaa
    <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Events" target="_blank">Events</a>
    extension.
</p>

<h1>Playing around</h1>

<p>
    The Kaa Event extension allows endpoints to exchange some events between each other.
    The structure of events defined by the
    <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Events/#event-class-and-event-class-schema" target="_blank">Event Class (EC) schema</a>.
    All Event classes are gathered into one
    <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Events/#event-class-families" target="_blank">Event Class Family (ECF)</a>.
    In order to add <b>ECF</b> in the application you need to add
    <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Events/#event-family-mapping" target="_blank">Event Class Family Mapping (ECFM)</a>.
    We prepared two <b>Event classes</b> for this demo: <b>ChatEvent</b> -
    we will send this event when we want to create or delete some chat room and <b>Message</b> -
    chat message by it self with the name of target chat room and message text.
    Also, notice that we created also utility object (enumeration) that defines event types.
</p>

<p>
    So in order to create such <b>ECF mapping</b> in the demo application we need to log-in into the
    <b>Administrative console</b> as <b>tenant administrator</b> (admin/admin123).
    Here you will find the <b>Event class families</b> tab.

    <br />
    <img src="https://raw.github.com/hunch7/sample-apps/app_description/eventdemo/resources/pic/event_demo_00.png?raw=true" />
    <br />
</p>

<p>
    Here you can create a new <b>ECF</b> if you click on <b>"Add ECF"</b> button
    or get details of present <b>ECF</b> if you click on the corresponding row,
    select the <b>ECF</b> with <b>"Chat"</b> name,
    <b>"org.kaaproject.kaa.samples.event"</b> namespace and <b>"Chat"</b>
    class name.

    <br />
    <img src="https://raw.github.com/hunch7/sample-apps/app_description/eventdemo/resources/pic/event_demo_0.png?raw=true" />
    <br />
</p>

<p>
    Here you can find ECF details and also ECF scheme in the
    <b>Add family version</b> section. There you can find ECF scheme that we
    added for this demo application. You can examine this scheme if you click
    on the corresponding row:

    <br />
    <img src="https://raw.github.com/hunch7/sample-apps/app_description/eventdemo/resources/pic/event_demo_1.png?raw=true" />
    <br />
</p>

<p>
    This schemas looks like this in a JSON form:
</p>

<p>
    For <b>ChatEvent</b>:
</p>

<pre>
    {
      "type": "record",
      "name": "ChatEvent",
      "namespace": "org.kaaproject.kaa.examples.event",
      "fields": [
        {
          "name": "ChatName",
          "type": {
            "type": "string",
            "avro.java.string": "String"
          }
        },
        {
          "name": "EventType",
          "type": {
            "type": "enum",
            "name": "ChatEventType",
            "symbols": [
              "CREATE",
              "DELETE"
            ],
            "classType": "object"
          }
        }
      ],
      "description": "",
      "classType": "event"
    }
</pre>


<p>
    For <b>Message</b>:
</p>

<pre>
	{
	  "type": "record",
	  "name": "Message",
	  "namespace": "org.kaaproject.kaa.examples.event",
	  "fields": [
	    {
	      "name": "ChatName",
	      "type": {
	        "type": "string",
	        "avro.java.string": "String"
	      }
	    },
	    {
	      "name": "Message",
	      "type": {
	        "type": "string",
	        "avro.java.string": "String"
	      }
	    }
	  ],
	  "description": "",
	  "classType": "event"
	}
</pre>

<p>
    Select <b>ChatEvent</b> field by clicking on the corresponding row.

    <br />
    <img src="https://raw.github.com/hunch7/sample-apps/app_description/eventdemo/resources/pic/event_demo_2.png?raw=true" />
    <br />
</p>

<p>
    Here you can find details of a particular <b>Event class</b>,
    <b>ChatEvent</b> in this case. Notice how we use nested record with special
    type - <b>ChatEventType</b> in this <b>EC</b>.
</p>

<p>
    More details about operations with <b>EC</b> and <b>ECFs</b> in
    <b>Administrative console</b> you can find in
    <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Events/#kaa-events-admin-ui" target="_blank">Events</a>
    extension documentation.
</p>

<p>
    Now we need to add <b>Event class family mapping</b> in our application.
    In order to do this logout and login in a <b>tenant developer</b> (devuser/devuser123).
</p>

<p>
    Navigate to <b>Event demo</b> application and then select
    <b>Event family mappings</b> tab. Here you can find the list of available
    ECFMs for your application.

    <br />
    <img src="https://raw.github.com/hunch7/sample-apps/app_description/eventdemo/resources/pic/event_demo_3.png?raw=true" />
    <br />
</p>

<p>
    We added one - <b>Chat</b>. You can do this if click on
    <b>Add event family mapping</b> button.

    <br />
    <img src="https://raw.github.com/hunch7/sample-apps/app_description/eventdemo/resources/pic/event_demo_4.png?raw=true" />
    <br />
</p>

<p>
    We selected required <b>ECF</b> from the list fo all available <b>ECFs</b>.
    Notice very important thing few applications can utilize the same ECF,
    so you can configure ECF mapping between applications,
    for example one of them will be the <b>source</b> of events and other -
    <b>sinks</b>.

    <br />
    <img src="https://raw.github.com/hunch7/sample-apps/app_description/eventdemo/resources/pic/event_demo_5.png?raw=true" />
    <br />
</p>

<p>
    Now when we finished with the <b>ECFs</b> we need to add a user verifier
    for our application. As you already know endpoints can exchange messages
    between each other only if they belong to the same user. Kaa server uses
    <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Endpoint-ownership/#owner-verifiers" target="_blank">User verifiers</a>
    in order to check provided user credentials. Kaa provides a set of user
    verifiers (Twitter, G+) but for simplicity we use
    <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Endpoint-ownership/#trustful-owner-verifier" target="_blank">Trustful user verifier</a>,
    which accepts any credentials provided by the user.
</p>

<p>
    In order to add <b>user verifier</b> into the application navigate to the
    <b>User verifiers</b> tab and click on <b>Add user verifier</b> button.

    <br />
    <img src="https://raw.github.com/hunch7/sample-apps/app_description/eventdemo/resources/pic/event_demo_6.png?raw=true" />
    <br />
</p>

<p>
    Give a name for the verifier, select it's type, <b>Trustful verifier</b>
    in our case and click on <b>Add</b> button.

    <br />
    <img src="https://raw.github.com/hunch7/sample-apps/app_description/eventdemo/resources/pic/event_demo_7.png?raw=true" />
    <br />
</p>

<p>
    Now the last step left - create SDK profile. Navigate to <b>SDK profiles</b>
    tab - here you can find the list of available SDK profiles.

    <br />
    <img src="https://raw.github.com/hunch7/sample-apps/app_description/eventdemo/resources/pic/event_demo_8.png?raw=true" />
    <br />
</p>

<p>
    In order to create new profile click on <b>Add SDK profile</b> button.

    <br />
    <img src="https://raw.github.com/hunch7/sample-apps/app_description/eventdemo/resources/pic/event_demo_9.png?raw=true" />
    <br />
</p>

<p>
    Now let's start demo application. Download application binary and
    copy-paste it into two more folders (each of endpoints must to be in it's
    own folder to avoid security files overwrite). Now launch first endpoint.
</p>

<pre>
	2016-08-31 16:38:19,566 [main] INFO  o.k.kaa.demo.event.EventDemo - Event demo started
	2016-08-31 16:38:19,570 [main] INFO  o.k.kaa.demo.event.EventDemo - --= Press any key to exit =--
	2016-08-31 16:38:21,639 [pool-2-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Kaa client started
	2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - The list of available chat rooms:

	"Living room"
	"Guest room"

	2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Select one of options:

	1. Join chat room
	2. Create chat room
	3. Delete chat room
	4. Exit application
</pre>

<p>
    Join the first chat room - <b>"Living room"</b>, in order to do this type
    "1" in a console and then the name of chat room.
</p>

<pre>
	...
	1

	2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Enter chat room name:
	Living room
	2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Joined "Living room" chat.
	2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Type message and press "Enter" to send it or type "quit" to live this chat.
</pre>

<p>
    Now launch the second and third endpoints: in second application join same
    <b>Living room</b> chat but in the third - join other <b>Guest room</b> chat.
</p>

<p>
    Now type some message in the first client, for example, "Hello world!".
    As you can see only second endpoint received the message because they are
    in the same chat room (<font color="red">Actually every endpoint receives
    all messages but we are filtering them by the chat room name</font>).
</p>

<p>
    So how does it work? In this application we subscribe every endpoint to
    the same user. If endpoint successfully registered on the Operations service
    and attached to the user it will be able to send and receive events.
    When you want to send message endpoint search for the event listeners and
    broadcasts <b>Message</b> event with the message text and target chat
    room name. All endpoints receive events and only endpoints within same
    chat room print their messages.
</p>

<p>
    Now If you leave <b>Living room</b> chat in the first application, join the
    <b>Guest room</b> chat and send a message - it will be retrieved only on
    the third endpoint.
</p>

<p>
    Now let's leave the chat and create new one:
</p>

<pre>
	...
	"quit"
	2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - The list of available chat rooms:

	"Living room"
	"Guest room"

	2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Select one of options:

	1. Join chat room
	2. Create chat room
	3. Delete chat room
	4. Exit application

	1
	2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Enter new chat name:

	Roof chat
	2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - The list of chat rooms have been updated.
	016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - The list of available chat rooms:

	"Living room"
	"Guest room"
	"Roof chat"

	2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Select one of trhe options:

	1. Join chat room
	2. Create chat room
	3. Delete chat room
	4. Exit application
</pre>

<p>
    You can observe the same on all endpoints.
</p>

<p>
    Now let's join the new chat in the first and the second endpoints and
    send some message to ensure that all works fine.
</p>

<p>
    Now let's delete newly created chat. leave it in the first endpoint and
    select delete option:
</p>

<pre>
	...
	"quit"

	016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - The list of available chat rooms:

	"Living room"
	"Guest room"
	"Roof chat"

	2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Select one of the options:

	1. Join chat room
	2. Create chat room
	3. Delete chat room
	4. Exit application

	3
	2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Enter new chat name:

	Roof chat
	2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - The list of chat rooms have been updated.
	016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - The list of available chat rooms:

	"Living room"
	"Guest room"

	2016-08-31 16:38:22,764 [pool-4-thread-1] INFO  o.k.kaa.demo.event.EventDemo - Select one of the options:

	1. Join chat room
	2. Create chat room
	3. Delete chat room
	4. Exit application
</pre>

<p>
    Now you can observe that on the other endpoints the list of chat rooms
    updated too and also the second endpoint leave the deleted chat.
</p>
]]>
        </details>
    </bundle>
</projectsConfig>