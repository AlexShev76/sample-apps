<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--

     Copyright 2014-2016 CyberVision, Inc.

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.

-->

<projectsConfig 
    xmlns="http://www.kaaproject.org"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.kaaproject.org ../../common/src/main/resources/demo/projects/demo_projects_schema.xsd">
    <project id="verifiers_demo_android">
        <name>User verifiers demo android</name>
        <description>Kaa user verifiers demo app for Android</description>
        <details>
            <![CDATA[
This simple app demonstrates a user verification flow in Kaa for Android.

<h2>Installation</h2>
Download the .apk to your Android device by clicking the "Binary" button on the left. Make sure that the device permits installing apps from "Unknown sources". Open the downloaded apk and follow the on-screen instructions.

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. After opening the "User verifiers demo" app, you will be able to log in to Facebook, Google or Twitter in order to get verified by the corresponding user verifier. After the verification is complete, you can start sending test messages to other devices through the Kaa Event subsystem.

Now it's time to test things out: install this app on different devices and log in with the same account. Once logged in, enter your message on some device and send it to other devices where you logged into the application. Please note that this demo is not an attempt to implement yet another "chat application". It is rather a PoC of a way to connect and exchange messages between devices that belong to the same user.

Please note that all the features of Administration UI are also supported by REST API.

<h2>What's next?</h2>

For more background on the user verification refer to the corresponding design reference section. It is also possible to implement a custom user verifier using programming guide.
        	]]>
        </details>
            
        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->
             
        <sdkLanguage>JAVA</sdkLanguage>
        
        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->
        
        <platforms>ANDROID</platforms>
        <features>EVENT USER_VERIFIER</features>
        <complexity>BASIC</complexity>
        <sourceArchive>android/verifiers_demo.tar.gz</sourceArchive>
        <projectFolder>verifiers_demo/VerifiersDemo</projectFolder>
        <sdkLibDir>verifiers_demo/VerifiersDemo/libs</sdkLibDir>
        <destBinaryFile>verifiers_demo/VerifiersDemo/bin/VerifiersDemo-debug.apk</destBinaryFile>
    </project>
    <project id="verifiers_demo_c">
        <name>User verifiers demo C</name>
        <description>Kaa user verifiers demo for C</description>
        <details>
            <![CDATA[
<p>
	This sample application is based on the <a href="http://kaaproject.github.io/kaa/docs/Glossary/#sdk-type" target="_blank">Kaa C SDK</a>.
	It works in conjunction with the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Events/" target="_blank">Events</a> and <a href="http://kaaproject.github.io/kaa/docs/Administration-guide/Users-management/" target="_blank">Users</a> management features.
	In this application, <a href="http://kaaproject.github.io/kaa/docs/Glossary/#kaa-client" target="_blank">Kaa client</a> registers its endpoint <a href="http://kaaproject.github.io/kaa/docs/Glossary/#access-token" target="_blank">access token</a> and creates an event listener.
</p>

<h1>Launching</h1>

To launch this sample application on the Kaa C SDK:

<ol>
	<li>
		Prepare your C SDK environment.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Using-Kaa-endpoint-SDKs/C/" target="_blank">Using Kaa endpoint SDKs</a>.
	</li>
	<li>
		Click the <b>Source</b> button.
		A project source download window will open.
		Click <b>Ok</b> and download the .tar.gz file.
	</li>
	<li>
		Unpack the downloaded archive and run the following command from the directory containing the unpacked source files.
			<pre>
				./build.sh deploy
			</pre>
	</li>
	<li>
		The program will ask you to enter the target platform for your build.
		Press Enter to specify the x86-64 platform (default) or enter the name of one of the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Using-Kaa-endpoint-SDKs/Supported-platforms/" target="_blank">supported platforms</a> and press Enter.
		The C SDK and the demo application are now built and the demo application is launched.
	</li>
</ol>

Once you built the application, you can start it at any time using the following command.

<pre>
	./build.sh run
</pre>

When you start the application, Kaa client generates its endpoint access token, publishes it on the <a href="http://kaaproject.github.io/kaa/docs/Glossary/#kaa-cluster" target="_blank">Kaa cluster</a> and displays it in the console.

If the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Endpoint-ownership/#assisted-attachment" target="_blank">assisted attachment</a> was successful, Kaa client will display the message previously sent from the mobile application.

<h1>Troubleshooting</h1>

<h2>Running the build.sh script returns an error message</h2>

<pre>
	libs/kaa/kaa-c*.tar.gz: Cannot open: No such file or directory.
</pre>

<p>
	This means that no SDK tarball was found in the libs/kaa directory.
</p>

Try the following:

<ul>
	<li>
		Download and install the <a href="http://kaaproject.github.io/kaa/docs/Glossary/#kaa-sandbox" target="_blank">Kaa Sandbox</a>.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/Getting-started/" target="_blank">Getting started</a>.
	</li>
	<li>
		Download the SDK tarball for this sample application and put it in the libs/kaa folder.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Your-first-Kaa-application/#generating-sdk" target="_blank">Generating SDK</a>.
	</li>
</ul>

<h2>CMake returns an error message</h2>

<pre>
	CMake error: The following variables are used in this project, but they are set to NOTFOUND: (...)
</pre>

<p>
	This means that CMake could not find the required libraries because they were not installed correctly.
	To address this issue, check if you completed all the required steps of the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Using-Kaa-endpoint-SDKs/C/" target="_blank">C SDK installation instructions</a>.
</p>
            ]]>
        </details>
        <sdkLanguage>C</sdkLanguage>
        <platforms></platforms>
        <features>USER_VERIFIER</features>
        <complexity>BASIC</complexity>
        <bundleId>verifiers_demo</bundleId>
        <sourceArchive></sourceArchive>
        <projectFolder></projectFolder>
        <sdkLibDir></sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="verifiers_demo_cpp">
        <name>User verifiers demo C++</name>
        <description>Kaa user verifiers demo for C++</description>
        <details>
            <![CDATA[
<p>
	This sample application is based on the <a href="http://kaaproject.github.io/kaa/docs/Glossary/#sdk-type" target="_blank">Kaa C++ SDK</a>.
	It works in conjunction with the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Events/" target="_blank">Events</a> and <a href="http://kaaproject.github.io/kaa/docs/Administration-guide/Users-management/" target="_blank">Users</a> management features.
	In this application, <a href="http://kaaproject.github.io/kaa/docs/Glossary/#kaa-client" target="_blank">Kaa client</a> registers its endpoint <a href="http://kaaproject.github.io/kaa/docs/Glossary/#access-token" target="_blank">access token</a> and creates an event listener.
</p>

<h1>Launching</h1>

To launch this sample application on the Kaa C++ SDK:

<ol>
	<li>
		Prepare your C++ SDK environment.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Using-Kaa-endpoint-SDKs/C++/" target="_blank">Using Kaa endpoint SDKs</a>.
	</li>
	<li>
		Click the <b>Source</b> button.
		A project source download window will open.
		Click <b>Ok</b> and download the .tar.gz file.
	</li>
	<li>
		Unpack the downloaded archive and run the following command from the directory containing the unpacked source files.
			<pre>
				./build.sh deploy
			</pre>
	</li>
	<li>
		The program will ask you to enter the target platform for your build.
		Press Enter to specify the x86-64 platform (default) or enter the name of one of the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Using-Kaa-endpoint-SDKs/Supported-platforms/" target="_blank">supported platforms</a> and press Enter.
		The C SDK and the demo application are now built and the demo application is launched.
	</li>
</ol>

Once you built the application, you can start it at any time using the following command.

<pre>
	./build.sh run
</pre>

When you start the application, Kaa client generates its endpoint access token, publishes it on the <a href="http://kaaproject.github.io/kaa/docs/Glossary/#kaa-cluster" target="_blank">Kaa cluster</a> and displays it in the console.

If the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Key-platform-features/Endpoint-ownership/#assisted-attachment" target="_blank">assisted attachment</a> was successful, Kaa client will display the message previously sent from the mobile application.

<h1>Troubleshooting</h1>

<h2>Running the build.sh script returns an error message</h2>

<pre>
	libs/kaa/kaa-c*.tar.gz: Cannot open: No such file or directory.
</pre>

<p>
	This means that no SDK tarball was found in the libs/kaa directory.
</p>

Try the following:

<ul>
	<li>
		Download and install the <a href="http://kaaproject.github.io/kaa/docs/Glossary/#kaa-sandbox" target="_blank">Kaa Sandbox</a>.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/Getting-started/" target="_blank">Getting started</a>.
	</li>
	<li>
		Download the SDK tarball for this sample application and put it in the libs/kaa folder.
		To do this, follow the instructions in <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Your-first-Kaa-application/#generating-sdk" target="_blank">Generating SDK</a>.
	</li>
</ul>

<h2>CMake returns an error message</h2>

<pre>
	CMake error: The following variables are used in this project, but they are set to NOTFOUND: (...)
</pre>

<p>
	This means that CMake could not find the required libraries because they were not installed correctly.
	To address this issue, check if you completed all the required steps of the <a href="http://kaaproject.github.io/kaa/docs/Programming-guide/Using-Kaa-endpoint-SDKs/C++/" target="_blank">C++ SDK installation instructions</a>.
</p>
            ]]>
        </details>
        <sdkLanguage>CPP</sdkLanguage>
        <platforms></platforms>
        <features>USER_VERIFIER</features>
        <complexity>BASIC</complexity>
        <bundleId>verifiers_demo</bundleId>
        <sourceArchive></sourceArchive>
        <projectFolder></projectFolder>
        <sdkLibDir></sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="verifiers_demo_ios">
        <name>GPIO control iOS</name>
        <description>User verifiers demo iOS</description>
        <details>
            <![CDATA[
This simple app demonstrates a user verification flow in Kaa on iOS.
]]>
        </details>
        <sdkLanguage>OBJC</sdkLanguage>
        <platforms>IOS</platforms>
        <features>USER_VERIFIER</features>
        <complexity>REGULAR</complexity>
        <bundleId>verifiers_demo</bundleId>
        <sourceArchive>objc/verifiers_demo.tar.gz</sourceArchive>
        <projectFolder>verifiers_demo</projectFolder>
        <sdkLibDir>verifiers_demo/libs</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>

</projectsConfig>
